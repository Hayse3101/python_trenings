# ---------------------------------- Глава 1 ----------------------------------
# ---------------------------- Знакомство с Python ----------------------------

""" Первая программа """
print("Hello World!")  # <- Функция для вывода переданных аргументов

""" Знакомство с переменными """
txt1 = "Язык программирования Python"  # <- Переменная с текстовым значением
num1 = 123  # <- Переменная с целочисленным значением

print(txt1)  # <- Отображение значение переменной txt
print(num1)
print("Текст:", txt1)  # <- Отображение значение переменной txt

""" Ввод значения в программу """
name1 = input("Как вас зовут? ")  # <- Считывание текстового значения
age1 = int(input("Сколько вам лет? "))  # <- Считывание числового значения

print(f"Добрый день, {name1}! Ваш возраст {age1}!")  # <- Отображение считанных значений

""" Функция eval() """
txt2 = "(2+3) / 0.25 - 4 * 2.1"  # <- Текстовое представление для команды
print(f"{txt2} = {eval(txt2)}")  # <- Отображение выражения и вычисление результата

res1 = input("Введите выражение: ")  # <- Считывание выражения для вычисления
print(f"Значение выражения: {eval(res1)}")  # <- Отображение значение выражения

print(f"Результат: {eval(txt := "2 + 2")}")  # <- Код просто такю

""" Знакомство со списками """
nums1 = [5, 10, 1, 60, 25, 3]  # <- Список из чисел:
#  Операции со списком
print(f"Список из чисел: {nums1}")
print(f"Длина списка: {len(nums1)}")
print(f"Первый элемент: {nums1[0]}")
print(f"Последний элемент: {nums1[-1]}")
print(f"Наибольшее значение: {max(nums1)}")
print(f"Наименьшее значение: {min(nums1)}")
print(f"Сумма: {sum(nums1)}")
print(f"Список в обратном порядке: {list(reversed(nums1))}")
print(f"Сортировка по возрастанию: {sorted(nums1)}")
print(f"Сортировка по убыванию: {sorted(nums1, reverse=True)}")
nums1[1] = "текст"
print(f"Получение среза: {nums1[1: len(nums1) - 1]}")
nums1[1:-1] = ["A", "B"]
print(f"После замены элементов: {nums1}")
nums2 = list(range(5, 10))  # <- Список чисел от 5 до 10
nums2[2:4] = []  # <- Удаление элементов из списка
del nums2[len(nums2) - 1]  # <- Удаление последнего элемента
nums3 = [2 * k + 1 for k in range(5)]  # <- Генератор нечётных чисел
symbs1 = list("Python")  # <- Список из символов создаётся на основе текста

""" Знакомство с условным оператором """
number1 = int(input("Введите целое число: "))  # <- Считывание целого числа
if number1 % 2 == 0:  # <- Если число - чётное
    print("Вы ввели четное число.")
else:  # <- Если чесло - нечётное
    print("Вы ввели нечётное число.")

""" Знакомство с оператором цикла """
n1 = int(input("Укажите верхнюю границу суммы: "))  # <- Считывание верхней границы суммы
s1 = 0  # <- Начальное значение суммы
k1 = 0  # <- Начальное значение индексной переменной

while k1 < n1:  # <- Оператор цикла для вычесления суммы
    k1 += 1  # <- Увелечение значения индексной переменной на единицу
    s1 += k1  # <- Прибавление слагаемого к сумме

print(f"Сумма чисел от 1 до {n1} равна {s1}")  # <- Отображение результата

n2 = input("Укажите количество слагаемых: ")
txt3 = "1"
k2 = 1
while str(k2) != n2:
    k2 += k2
    txt = txt + "+" + str(k2)

print(f"txt = {eval(txt)}")

""" Знакомство с функциями """


def show(txt4):  # <- Функция для отображения букв из переданного
    symbs2 = sorted(list(txt4))  # <- Преобразование текста в список и его сортировка
    print(symbs2)  # <- Отображение содержимого списка


show("Python")  # <- Вызов функции


def sqsum(n):  # <- Функция для вычисления суммы квадратов натуральных чисел
    nums = [k * k for k in range(1, n + 1)]  # <- Создание списка из квадратов натуральных чисел
    return sum(nums)  # <- Фозвращение результата функции


m1 = 10  # <- Переменная с числовым значением
print(f"Сумма квадратов чисел от 1 до {str(m1)} : {sqsum(m1)}")  # <- Вызов функции для вычисления суммы квадратов чисел

# ---------------------------------- Глава 2 ----------------------------------
# ----------------------------- Основные операции -----------------------------\
# ------ Оператор цикла while ------
""" Общий шаблон оператора цикла while
 while условие: 
        команды
 else:
        команды
"""

# -- 2.1. Отображение состава чисел --
number1 = int(input("Введите число: "))  # <- Вводится число
while number1 > 0:  # <- Пока числобольше нуля
    digit = number1 % 10  # <- Последняя цифра в числе
    print(f"| {str(digit)} ", end="")  # <- Отображение цифры
    number1 = number1 // 10  # <- Отбрасывается поледняя цифра в числе
print("|")  # <- Отображается последний результат
# --------------------------------

# -- 2.2. Простые числа --
number2 = int(input("Введите число: "))  # <- вводится число
num4 = number2 // 2  # <- Врехняя граница для делителя
k1 = 2  # <- Начальное значение делителя
while k1 <= num4:  # <- Поиск делителя числа
    if number2 % k1 == 0:  # <- Если число делится на k
        print("Число не является простым")
        break  # <- Завершение оператора цикла
    else:  # <- Если условие ложно
        k1 += k1  # <- Увеличивается значение делителя
else:  # <- Блок выполняется, если не выполнена инструкция break
    print("Это простое число")

print("Проверка завершена")  # <- Сообщение отображается всегда
# --------------------------------

# -- 2.3. Простые числа --
number3 = int(input("Введите число: "))  # <- Вводится число
print("Делится на", 1)  # <- Сообщение о первом делителе числа
k2 = 1  # <- Начальное значение для детлиетля
while k2 < number3 // 2:  # <- Поиск делителей числа
    k2 += 1  # <- Значение делителя увеличивается на единицу
    if number3 % k2 != 0:  # <-  Если k не является делителем числа
        continue  # <- Завершение текущего цикла
    print(f"Делится на {k2}")
print(f"Делится на {number3}")
# --------------------------------

# ------ Оператор цикла for ------
""" Шаблон вызова оператора for 
 for переменная in список:
        команды
"""
# -- 2.5. Перебор элементов списка --
colors = [  # <- Список с текстовыми элементами
    "Синий",
    "Желтый",
    "Зеленый",
]

print(colors)  # <- Отображение содержимого списка
for s in colors:  # <- Перебор элементов списка
    print(f"{s} -> {len(s)}")
# --------------------------------

# -- 2.6. Числа Фибоначчи --
n = 15  # <- Количествов последовательности
a, b = 1, 1  # <- Первые два числа
print(a, b, end=" ")  # <- Отображение первых двух чисел
for _ in range(n - 2):  # <- За каждый цикл вчисляется одно новое число
    a, b = b, a + b  # < - Вычисление нового числа в последовательности
    print(b, end=" ")  # <- Отображение нового числа

""" Шаблон вызова оператора for с блоком else: 
 for переменная in список:
        команды
 else:
        команды
"""
# --------------------------------

# -- 2.7. Поиск букв в тексте --
mytext = input("Введите текст для проверки: ")  # <-Текст для поиска букв
symbs2 = ['а',  # <- Буква для поиска
          'у',
          'я',
          ]
print(f"Ищем такие буквы: {symbs2}")

for s in symbs2:  # <- Поиск букв
    if s in mytext:  # <- Если буква найдена
        print("В тексте есть буква '" + s + "'")
        break  # <- Завершение оператора цикла
    else:  # <- Если буквы нет
        print("В тексте нет буквы '" + s + "'")
else:  # <- Блок else оератора цикла
    print("Таких букв в тексте нет")
print("Поиск завершен")  # <- Последнее сообщение программы
# --------------------------------

# -- 2.8. Решение линейного уравнения --
a1, b1 = eval(input("Введите (через запятую) два числа: "))
# 195 Проверка тива введенных параметров
if (type(a1) == int or type(a1) == float) and (type(b1) == int or type(b1) == float):
    print(f"Уравнение {str(a)}x = {str(b)}")
    if a != 0:  # <- Если первый параметр ненулевой
        print(f"Решение x = {str(b / a)}")
    else:  # <- Если первый параметр нулевой
        if b != 0:  # <- Если второй параметр нулевой
            print("Решений нет!")
        else:  # <- Если оба параметра нулевst
            print("Решение - любое число!")

else:  # <- Если параметры не числовые:
    print("Введены некорректные значения!")
    raise SystemExit(0)  # <- Завершение выполнения программы
print("Поиск решения завершен.")
# --------------------------------

""" Ещё один шаблон условных конструкция
 if условие:
    команды
 elif условие:
    команды
 ...
 elif условие:
    команды
 else:
    команды
"""

# -- 2.9. Ещё один способ решить уравнение --
a1, b1 = eval(input("Введите (через запятую) два числа: "))
# 195 Проверка тива введенных параметров
if (type(a1) != int and type(a1) != float) or (type(b1) != int and type(b1) != float):
    print("Введены некорректные значения!")
    raise SystemExit(0)  # <- Завершение выполнения программы
elif a != 0:  # <- Если первый параметр ненулевой
    txt4 = "Решение x = " + str(b / a)
elif b != 0:  # <- Если второйпараметр ненулевой (при нулевом первом)
    txt4 = "Решений нет!"
else:  # <- Если оба параметра нулевst
    print("Решение - любое число!")

print(f"Уравнение {str(a)}x = {str(b)}")  # <- Вид уравнения
print(txt4)  # <- Результат поиска корня
print("Поиск решения завершен.")
# --------------------------------

# -- 2.10. Индетификация числа --
res1 = "Это число "  # <- Текстовая переменная
txt5 = input("Введите название числа: ")  # <- Вводится текст
txt5 = txt5.lower()  # <- Преоразование в нижний регистр
if txt5 == "один" or txt5 == "единица":  # <- Индентификация числа
    res1 += "1"
elif txt5 == "два" or txt5 == "двойка":
    res1 += "2"
elif txt5 == "три" or txt5 == "тройка":
    res1 += "3"
else:
    res1 += "не идентифицировано"
print(res1)  # <- Результат Индентификации
# --------------------------------

# ------ Тернарный оператор ------
""" Синтаксис тернарного оператора 
- значение if условие else значение 
"""

# -- 2.11. Проверка числа на четность/нечетность --
num5 = int(input("Введите целое число: "))  # <- Вводится число
res2 = "четное" if num5 % 2 == 0 else "нечетное"  # <- Использование тернарного оператора
print(f"Это {res2} число")
# --------------------------------

# -- 2.12 . Значения разных типов и тернарный оператор --
val1 = eval(input("Введите выражение: "))  # <- Вводится выражение
a, b = (val1[0], val1[-1] if type(val1) == str else (val1, type(val1)))  # <- Используется тернарный оператор
print(a)  # <- Значения переменных
print(b)  # <- Значения переменных
# --------------------------------

# ------ Обработка исключительных ситуаций ------
""" Общий шаблон для конструкции try-except
 try:
    команды
 except:
    команды
"""

# -- 2.13. Знакомство с обработкой исключений --
print("Обработка исключений")
try:  # <- Контролируемый код
    num6 = int(input("Введите целое число: "))
    print(f"Вы ввели число {str(num6)}")
except:  # <- Обработка исключения
    print("Нужно было ввести целое число!")
print("Спасибо за сотрудничество!")
# --------------------------------
""" Шаблон try-except
 try:
    команды
 except Тип_ошибки:
    команды
 ...
 except Тип_ошибки:
    команды
"""

# -- 2.14. Обработка ошибок разных типов --
print("Операции со списком чисел...")
try:  # <- Контролируемый код
    nums4 = eval(input("Введите числовой список: "))
    print(f"Получено значение: {str(nums4)}")
    a2 = int(nums4[0])
    b2 = int(nums4[3])
    print(f"{str(a2)} / {str(b2)} = {str(a2/b2)}")
except ValueError:  # <- Обработка исключений ValueError
    print("ValueError: ошибка при преобразовании!")
except ZeroDivisionError:  # <- Обработка исключений ZeroDivisionError
    print("ZeroDivisionError: попытка деления на ноль!")
except TypeError:  # <- Обработка исключений TypeError
    print("TypeError: недопустимая операция!")
except IndexError:  # <- Обработка исключений IndexError
    print("IndexError: неверный индекс элемента!")
except SyntaxError:  # <- Обработка исключений SyntaxError
    print("SyntaxError: невозможно вычислить выражение!")
except NameError:  # <- Обработка исключений NameError
    print("NameError: неверный индетификатор!")
print("Завершение программы.")
# --------------------------------

# -- 2.15. Ещё один способ обработки ошибок --
try:  # <- Контролируемый код
    nums4 = eval(input("Введите числовой список: "))
    print(f"Получено значение: {str(nums4)}")
    a2 = int(nums4[0])
    b2 = int(nums4[3])
    print(f"{str(a2)} / {str(b2)} = {str(a2/b2)}")
except ZeroDivisionError:  # <- Обработка исключений ZeroDivisionError
    print("ZeroDivisionError: попытка деления на ноль!")
except IndexError:  # <- Обработка исключений IndexError
    print("IndexError: неверный индекс элемента!")
except:
    print("Что-то пошло не так!")
print("Завершение программы.")
# --------------------------------
